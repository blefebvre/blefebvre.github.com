<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bruce Lefebvre]]></title>
  <link href="https://brucelefebvre.com/atom.xml" rel="self"/>
  <link href="https://brucelefebvre.com/"/>
  <updated>2018-10-12T23:14:04-04:00</updated>
  <id>https://brucelefebvre.com/</id>
  <author>
    <name><![CDATA[Bruce Lefebvre]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get started with React Native, TypeScript, and CocoaPods]]></title>
    <link href="https://brucelefebvre.com/blog/2018/10/12/react-native-typescript-cocoapods/"/>
    <updated>2018-10-12T22:34:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2018/10/12/react-native-typescript-cocoapods</id>
    <content type="html"><![CDATA[<p>This article gives an introduction to my preferred development setup of 2018 for building mobile applications: React Native with TypeScript and CocoaPods, coded in the awesome Visual Studio Code editor.</p>

<p>Over the past 8 months I&#8217;ve had the pleasure of working on a side project with a very special customer: my Dad. His idea was to create an iOS app to give users a consolidated view of the investments they hold across multiple accounts. I suggested that such a thing must surely already exist &#8211; which it did, but none of the existing offerings suited him, primarily due to his comfort level in trusting the app developer to store and manage his investment data in a secure manner. With the seemingly constant stream of news covering large corporations being hacked, I couldn&#8217;t blame him for this concern.</p>

<p><img src="https://brucelefebvre.com/images/react-native/5-spec.jpg" title="The original spec." ></p>

<p>With the delivery of the app&#8217;s spec accompanied by a hand-written cover letter, the project was on.</p>

<!-- more -->




<!-- 
The solution we came up with was one where the data would be stored locally on-device, which we found to have a number of benefits:

- There would be no server for us to manage, patch, keep online, and serve as a single point of failure for the app
- There would be no server-side code to develop, debug, load test, and monitor
- The app would work offline out-of-the-box, since this would be the primary use case
- If our users' wished to sync their data with another device, the app could be integrated with a service like Dropbox (a pattern we'd seen work well in other apps, such as [1Password](https://1password.com/))
-->




<!--
We were sold on the approach, and I began looking into options for storing relational data device-side with minimal overhead. SQLite quickly became the natural choice: it's fast, rock solid, and has been battle tested for years across a huge array of platforms and devices. 
-->


<p>In an effort to use this side project as a learning opportunity, I picked a technology that I&#8217;d been interested in for ages but had yet to find a use case for: React Native. As a huge React fan for building web UIs I was instantly hooked. There were a few gotchas along the way but my experience was almost entirely positive. I intend to cover a few interesting aspects of building this app over the next few blog posts &#8211; including SQLite, Dropbox integration, syncing data between devices, and testing &#8211; but this one will focus on simply bootstrapping the React Native project that I&#8217;ll build upon in future posts.</p>

<h2>Tools of the trade</h2>

<p>To follow along with this article you will need a Mac, and the tools indicated in the &#8220;Installing dependencies&#8221; section of the <a href="https://facebook.github.io/react-native/docs/getting-started.html#installing-dependencies">Getting Started page of the React Native docs</a>. Please work through this section of the linked doc before moving on!</p>

<h2>TypeScript</h2>

<p>TypeScript is a tool to enable type support in JavaScript projects which I intend to use on every one of my JS projects going forward. I encourage you to give it a try &#8211; for me, it felt like the piece that JS was missing. I am a huge fan of using it for both React Native as well as web development.</p>

<p>I had initially written a medium-length novel on setting up TypeScript to work in a React Native app (RN going forward), but discovered an extremely helpful little project that offers a template to quickly bootstrap an RN app with built-in TypeScript support. Big thanks to GitHub user <a href="https://github.com/emin93">emin93</a> for building and supporting the very handy <a href="https://github.com/emin93/react-native-template-typescript">react-native-template-typescript</a> repo! I sure wish that I&#8217;d known about this when I initially bootstrapped my app.</p>

<p>At the time of writing, I was using Node <code>v8.12.0</code> and react-native <code>2.0.1</code>. Let&#8217;s begin:</p>

<pre><code>react-native init MyReactNativeTypeScriptApp --template typescript
cd MyReactNativeTypeScriptApp/
node setup.js
</code></pre>

<p>To run the TypeScript compiler, and watch the filesystem for changes, run:</p>

<pre><code>npm run tsc -- -w
</code></pre>

<p>Annnnd we&#8217;re done! With TypeScript support, anyways. You should now have a terminal window open that is displaying something to the effect of:</p>

<p><img src="https://brucelefebvre.com/images/react-native/2-tsc.png" title="TypeScript CLI watching the source. No errors detected." ></p>

<p>At this point I&#8217;d recommend opening up the directory you&#8217;ve initialized your app into with the <a href="">Visual Studio Code</a> editor. It is free, has excellent support for TypeScript (both are built by Microsoft), and a big community behind it. You may need to install the <code>code</code> <a href="https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line">command in your path</a> before running this:</p>

<pre><code>code .
</code></pre>

<p>Not much there, right? I mean, outside of the node_modules directory, of course ðŸ˜…. Keep the VS Code window open, and we&#8217;ll come back to it in a moment.</p>

<h2>CocoaPods</h2>

<p>I wanted to make this as real-world an example as possible, so we&#8217;re going to be setting up CocoaPods as well. CocoaPods is supported by a number of 3rd party RN libraries to quickly and easily wire up the parts of each library that involve native code. We&#8217;ll use it extensively over the next few blog posts on RN. <a href="https://shift.infinite.red/beginner-s-guide-to-using-cocoapods-with-react-native-46cb4d372995">This article on shift.infinite.red</a> goes way deeper in depth on CocoaPods setup, but I am going to skip right to the commands I used to initialize my project.</p>

<p>If you do not yet have CocoaPods installed:</p>

<pre><code>gem install cocoapods
</code></pre>

<p>Init CocoaPods in the ios/ directory:</p>

<pre><code>cd ios/
pod init
</code></pre>

<p>Locate your Podfile in VS Code, or open it from the CLI:</p>

<pre><code>code Podfile
</code></pre>

<p>Replace the contents of your Podfile with the following (assumes you&#8217;ve named your app <code>MyReactNativeTypeScriptApp</code>; simply replace that string if that&#8217;s not the case):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target 'MyReactNativeTypeScriptApp' do
</span><span class='line'>  # Pods for MyReactNativeTypeScriptApp
</span><span class='line'>
</span><span class='line'>  pod 'yoga', :path =&gt; '../node_modules/react-native/ReactCommon/yoga'
</span><span class='line'>
</span><span class='line'>  pod 'React', :path =&gt; '../node_modules/react-native', :subspecs =&gt; [
</span><span class='line'>    'DevSupport',
</span><span class='line'>    'RCTLinkingIOS',
</span><span class='line'>    'RCTImage'
</span><span class='line'>  ]
</span><span class='line'>  
</span><span class='line'>  # We'll add the react-native-sqlite-storage package during a later post here
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>post_install do |installer|
</span><span class='line'>  installer.pods_project.targets.each do |target|
</span><span class='line'>    # The following is needed to ensure the "archive" step works in XCode.
</span><span class='line'>    # It removes React & Yoga from the Pods project, as it is already included in the main project.
</span><span class='line'>    # Without this, you'd see errors when you archive like:
</span><span class='line'>    # "Multiple commands produce ... libReact.a"
</span><span class='line'>    # "Multiple commands produce ... libyoga.a"
</span><span class='line'>
</span><span class='line'>    targets_to_ignore = %w(React yoga)
</span><span class='line'>    
</span><span class='line'>    if targets_to_ignore.include? target.name
</span><span class='line'>      target.remove_from_project
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Tell CocoaPods to process your Podfile and install the Pods you&#8217;ve included above (still in the <code>ios/</code> dir):</p>

<pre><code>pod install
</code></pre>

<p>If successful, you should see a message printed to the console that indicates something to the effect of (check above the <code>PBXBuildFile --</code> output):</p>

<blockquote><p>Pod installation complete! There are 4 dependencies from the Podfile and 2 total pods installed.</p></blockquote>

<p>If you see a failure at this point, I would recommend digging in to the <a href="https://shift.infinite.red/beginner-s-guide-to-using-cocoapods-with-react-native-46cb4d372995">shift.infinite.red article</a> and resolving the issue before moving on.</p>

<!-- 

At the time of writing, [facebook/react-native/issues/21310](https://github.com/facebook/react-native/issues/21310) was open which meant that I had to add `@babel/runtime` via npm to enable the RN Metro bundler to correctly create an app bundle:

    npm install --save-dev @babel/runtime

-->


<p>OK! This is a good point to check that the app we just created is in fact runnable. To avoid over-complicating this tutorial I am going to focus on iOS only, but each dependency I have included is supported on Android as well. Per the <code>pod install</code> console output, make sure to use the <code>MyReactNativeTypeScriptApp.xcworkspace</code> file to open your iOS project from now on in Xcode. Still in the <code>ios/</code> directory, run:</p>

<pre><code>open MyReactNativeTypeScriptApp.xcworkspace
</code></pre>

<p>In Xcode, select a simulator to target and tap the Play button to build and run your app. With any luck, you should see the Metro Bundler open in a Terminal window, and the iOS simulator should show your app running alongside it. This could take a few minutes during the first run of the app since there&#8217;s lots of native code to be compiled:</p>

<p><img src="https://brucelefebvre.com/images/react-native/1-app-running.png" title="'App running on the iOS simulator'" ></p>

<p>Did you have an issue starting up the app? Try clearing the Metro cache, and running the app again from Xcode:</p>

<pre><code>react-native start --reset-cache
</code></pre>

<h2>Hot Reload</h2>

<p>You&#8217;ve made it this far. Finally, let&#8217;s make a change to the code to see it reflected <em>immediately</em> in the iOS simulator. To enable this super-slick workflow, we will need to enable Hot Reloading. In the iOS simulator, tap Command+D to open the development menu.</p>

<p>Did that not do anything? Sometimes this happens to me as well. Try triggering a &#8220;shake gesture&#8221; via the Hardware menu:</p>

<p><img src="https://brucelefebvre.com/images/react-native/3-shake.png" title="'Triggering a shake gesture'" ></p>

<p>With the developer menu open, make sure Live Reload is <em>disabled</em> and Hot Reload is <em>enabled</em>. Your menu should look like this:</p>

<p><img src="https://brucelefebvre.com/images/react-native/4-dev-menu.png" title="'Triggering a shake gesture'" ></p>

<p>We&#8217;re now ready to make a change to the code. Open App.tsx with VS Code, and make a change to some of the text in the JSX of the App component&#8217;s <code>render()</code> function, such as changing &#8220;Welcome to React Native!&#8221; to &#8220;THIS IS AWESOME!&#8221;. Save the file. Observe the iOS simulator&#8230;</p>

<p>Within seconds your code change should be reflected in the simulator. This is one of my favourite features that the React Native toolchain enables, and I find I can get seriously productive when I see my code changes reflected immediately like this.</p>

<p>I hope you&#8217;ve found this useful! Stay tuned for more articles on my experience working on this project with React Native, coming soon.</p>

<h2>Resources</h2>

<p>I highly recommend working through the steps yourself to get all the latest dependencies, but you can find the result of running through these instructions here:</p>

<p><a href="https://github.com/blefebvre/react-native-with-typescript-and-cocoapods-demo">github.com/blefebvre/react-native-with-typescript-and-cocoapods-demo</a></p>

<p>Lastly, the app I wrote about in the intro is now live! Send an email to <code>bruce at &lt;this domain&gt;</code> if you&#8217;d like to try it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build an app with Content Services at Adobe SUMMIT 2017]]></title>
    <link href="https://brucelefebvre.com/blog/2017/03/10/build-an-app-with-content-services-at-adobe-summit-2017/"/>
    <updated>2017-03-10T16:12:00-05:00</updated>
    <id>https://brucelefebvre.com/blog/2017/03/10/build-an-app-with-content-services-at-adobe-summit-2017</id>
    <content type="html"><![CDATA[<p><img src="https://brucelefebvre.com/images/mixology.jpeg" alt="Image of the app that you'll build during our SUMMIT lab" title="You'll build this app! Yes, YOU!"/></p>

<p>Are you curious about how the next generation of apps will be built with Adobe&#8217;s Experience Manager Content Services solution? Have a free hour and a half on Wednesday, March 22nd at 2PM? Join John Fait and I (AEM Mobile engineering) for an action-packed lab, &#8220;Unleash your app experience with AEM developer customizations&#8221; (<a href="http://bit.ly/summit-lab-3847" target="_blank">Lab 3847</a>), where we&#8217;ll cover:</p>

<!-- more -->


<ul>
<li>An introduction to AEM and the PhoneGap developer toolchain</li>
<li>Modeling data in Content Services, and pushing that data live to your user&#8217;s screens</li>
<li>Wiring up Content Services data to an existing mobile app</li>
<li>Using Content Sync to export AEM content for offline use, and delivering delta updates</li>
<li>Reusing Content Services data across web channels</li>
<li>Extending the AEM Mobile app dashboard with custom tiles</li>
</ul>


<p>If you&#8217;re at all technically inclined and looking to skill up on one of the most highly anticipated features of AEM 6.3, sign up now to avoid missing out: <a href="http://bit.ly/summit-lab-3847" target="_blank">Unleash your app experience with AEM developer customizations</a></p>

<p>See you in Vegas!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging an AEM App]]></title>
    <link href="https://brucelefebvre.com/blog/2015/10/14/debugging-an-aem-app/"/>
    <updated>2015-10-14T11:20:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2015/10/14/debugging-an-aem-app</id>
    <content type="html"><![CDATA[<p>Does your AEM App get stuck at a blank screen when you run it via the Cordova CLI?</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/app_init_fail.png" title="'Failure to initialize'" ></p>

<p>The following steps will help you get to the root of the error on both iOS and Android.</p>

<!-- more -->


<h2>iOS</h2>

<p>These steps assume you have a functional Cordova build toolchain (including Xcode and the iOS Simulator), and are able to run <code>cordova platform add ios &amp;&amp; cordova emulate ios</code> without any CLI related errors.</p>

<h4>Enable Develop menu in Safari</h4>

<p>From Safari&#8217;s menu, open &#8220;Preferences&#8230;&#8221;, and navigate to the &#8220;Advanced&#8221; tab.</p>

<p>Make sure the checkbox labeled &#8220;Show develop menu in menu bar&#8221; is checked:</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/dev.png" title="'Develop mode checkbox'" ></p>

<h4>Connect the web inspector to your broken app</h4>

<p>From the freshly enabled Develop menu, initiate a connection to your app running on the iOS Simulator (I&#8217;ll be using the <a href="https://github.com/blefebvre/aem-phonegap-kitchen-sink">kitchen-sink</a> app for this post):</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/develop_menu.png" title="'Develop mode checkbox'" ></p>

<p>You will be greeted by a new Web Inspector Safari window that is connected to the AEM App running on your iOS Simulator.</p>

<h4>Refresh to see initialization errors</h4>

<p>Navigate to the Console tab. You shouldn&#8217;t see any errors, aside from perhaps Safari attempting to load source maps that have not been provided. In order to see any errors which occurred during the initialization of the app, you will need to refresh the app. Locate the &#8216;Reload page&#8217; button and give it a click (or: hit âŒ˜ + R on your keyboard):</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/reload_app.png" title="'Reload app'" ></p>

<p>You should now see a few lines of debug logging, along with an error!</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/console_output.png" title="'Console output'" ></p>

<p>In my case it appears that the ContentSync variable is missing. This variable is exported by the PhoneGap ContentSync plugin, so I would begin my bug investigation by seeing if this plugin has been successfully installed.</p>

<p>If this issue is occurring on an app obtained from an open source repo, the console output is extremely valuable and should be included in your bug report.</p>

<h2>Android</h2>

<p>Like above, ensure that you are able to run <code>cordova platform add android &amp;&amp; cordova emulate android</code> without any CLI related errors before continuing.</p>

<h4>Connect Chrome&#8217;s web inspector to the app</h4>

<p>In Chrome, navigate to <a href="chrome://inspect">chrome://inspect</a>, and locate your app&#8217;s WebView. Click the blue &#8220;inspect&#8221; link to open the remote web inspector connected to your Android emulator.</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/chrome_inspect.png" title="'Chrome inspect'" ></p>

<h4>Refresh to view initialization errors</h4>

<p>Open the console tab and hit âŒ˜ + R on OS X, or Ctrl + R on Windows to refresh the current page of the application. In the screenshot below, I don&#8217;t have any errors in the console but I can still view the output of console.log statements in my code, such as navigation between pages:</p>

<p><img src="https://brucelefebvre.com/images/debug-apps/chrome_console.png" title="'Remote app Web Inspector console'" ></p>

<p>Happy debugging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using SSL locally for AEM dev]]></title>
    <link href="https://brucelefebvre.com/blog/2015/08/19/using-ssl-locally-for-aem-development/"/>
    <updated>2015-08-19T00:02:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2015/08/19/using-ssl-locally-for-aem-development</id>
    <content type="html"><![CDATA[<h3>Goal</h3>

<p><img src="https://brucelefebvre.com/images/ssl-pub/ssl-geo.png" title="'Publish instance with an untrusted cert in action'" ></p>

<p>Set up an AEM publish instance with SSL to enable local, OS X-based development on <code>:8443</code>. These instructions are deliberately concise and not designed to be used in prod (refer to the <a href="https://docs.adobe.com/docs/en/aem/6-0/deploy/configuring/config-ssl.html">official docs</a> for that).</p>

<h3>You will need</h3>

<ul>
<li>An AEM publish instance (accessible - for the moment - on <code>:4503</code>)</li>
<li>A machine running OS X (the following was tested on Yosemite)</li>
</ul>


<!-- more -->


<h3>Generate keys</h3>

<p>Navigate to your publish instance&#8217;s <code>crx-quickstart</code> directory:</p>

<pre><code>$ cd crx-quickstart/
</code></pre>

<p>Create an <code>ssl/</code> directory, and use <code>keytool</code> to generate your keystore file (replacing &#8216;password&#8217; below, if desired):</p>

<pre><code>$ mkdir ssl
$ cd ssl/
$ keytool -genkeypair -keyalg RSA -validity 3650 -alias cqse -keystore cqkeystore.keystore -keypass password -storepass password
&lt;enter cert details as prompted&gt;
</code></pre>

<p>A file named &#8216;cqkeystore.keystore&#8217; will be created in your current working directory.</p>

<h3>AEM configuration</h3>

<p>Navigate to CRX/de on your publish instance (<a href="http://localhost:4503/crx/de/index.jsp">http://localhost:4503/crx/de/index.jsp</a>) and log in with an administrator account.</p>

<p>Using the content browser, navigate to <code>/apps/</code>. Right click and create a folder called &#8216;system&#8217;, and inside this new folder create another called &#8216;config&#8217;.</p>

<p><img src="https://brucelefebvre.com/images/ssl-pub/create-folder.png" title="'Create folders using CRXde'" ></p>

<p>Tap &#8216;Save All&#8217; to persist your new folders.</p>

<p>Create a new file in <code>/apps/system/config/</code> named &#8216;org.apache.felix.http.config&#8217;. For the contents of the file, paste in the following:</p>

<pre><code>org.apache.felix.https.enable=B"true"
org.apache.felix.https.keystore="crx-quickstart/ssl/cqkeystore.keystore"
org.apache.felix.https.keystore.key.password="password"
org.apache.felix.https.truststore="crx-quickstart/ssl/cqkeystore.keystore"
org.apache.felix.https.truststore.password="password"
org.apache.felix.http.nio=B"true"
org.osgi.service.http.port.secure=I"8443"
</code></pre>

<p>If you replaced &#8216;password&#8217; for the <code>keytool</code> command, make sure you use the same value in the above. Tap &#8216;Save All&#8217; to persist your new config file.</p>

<h3>Try it out</h3>

<p><img src="https://brucelefebvre.com/images/ssl-pub/ssl-unsafe.png" title="'Unsafe!'" ></p>

<p>With any luck, your https-capable publisher should now be available at <a href="https://localhost:8443/">https://localhost:8443/</a>. You may see a page warning you against servers that use untrusted certificates, but for development purposes you can hit (on Chrome) &#8216;Advanced&#8217;, and &#8216;Proceed to localhost (unsafe)&#8217;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AEM Apps Starter Kit improvements]]></title>
    <link href="https://brucelefebvre.com/blog/2015/06/18/aem-6-dot-1-apps-starter-kit-improvements/"/>
    <updated>2015-06-18T11:29:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2015/06/18/aem-6-dot-1-apps-starter-kit-improvements</id>
    <content type="html"><![CDATA[<p>With <a href="https://docs.adobe.com/docs/en/aem/6-1/release-notes.html">AEM 6.1 out the door</a>, we&#8217;ve pushed some commits to the <a href="https://github.com/Adobe-Marketing-Cloud-Apps/aem-phonegap-starter-kit">Starter Kit repository</a> to ensure that the apps you bootstrap with it are taking advantage of the present state of the art. What follows is a visual tour of a few of those improvements.</p>

<h3>Native Page Transitions</h3>

<p><img src="https://brucelefebvre.com/images/starter-kit-improvements/transitions.gif" title="'App showcasing native transitions'" ></p>

<p>Transitions between pages play such a big role in how your app&#8217;s performance is perceived, yet perfecting this animation with CSS can stump even the sharpest front-end dev. The Starter Kit now comes with the excellent <a href="https://github.com/Telerik-Verified-Plugins/NativePageTransitions">Native Page Transitions</a> plugin enabled by default, delivering buttery smooth transitions while offloading the tedious <code>translate3d</code> (or was it <code>transform</code>?) work to native hardware acceleration. Many thanks go to <a href="https://twitter.com/eddyverbruggen">@eddyverbruggen</a> for all the hard work that went into this plugin!</p>

<!-- more -->


<h3>PhoneGap/Cordova CLI 5</h3>

<p><img src="https://brucelefebvre.com/images/starter-kit-improvements/phonegap_cli_5.gif" title="'PhoneGap CLI v5 in action'" ></p>

<p>The latest PhoneGap command line interface (CLI) release contains a <a href="http://phonegap.com/blog/2015/04/28/phonegap-cli-5.0.0-0.27.0/">bunch of improvements</a>, but is (unfortunately) not compatible with the Geometrixx sample that shipped with 6.1. Not to fear: we will be releasing a rev of the sample shortly. In the meantime our Starter Kit is all set to take advantage of the new CLI, including:</p>

<ul>
<li>Cordova Android v4, which introduces support for <a href="https://crosswalk-project.org/">Crosswalk</a>!</li>
<li>The use of config.xml to manage platforms and plugins - a tidy alternative to writing custom hooks</li>
<li>Latest versions of all core plugins, including PhoneGap&#8217;s brand new <a href="https://github.com/phonegap/phonegap-plugin-contentsync">Content Sync plugin</a></li>
<li>Analytics instrumentation with Adobe&#8217;s Mobile Services plugin</li>
</ul>


<h3>Separation of code from authorable content</h3>

<p><img src="https://brucelefebvre.com/images/starter-kit-improvements/separation.png" title="'content-dev and content-author have split'" ></p>

<p>The code you write and the content your authors manage has been separated into two content packages to facilitate management as your AEM Apps project grows. With this model, you can continue to iterate on the code while authors work on the content without stepping on one another&#8217;s changes.</p>

<h3>&#8230; And more!</h3>

<p><img src="https://brucelefebvre.com/images/starter-kit-improvements/responsive_sim.gif" title="'Responsive simulator in action'" ></p>

<ul>
<li>Responsive Simulator in the touch optimized editor is enabled by default</li>
<li>Starter Kit no longer includes a dependency on Geometrixx app code</li>
<li>Cordova splash page now sticks around until app initialization is complete</li>
</ul>


<p>We hope you find the new and improved <a href="https://github.com/Adobe-Marketing-Cloud-Apps/aem-phonegap-starter-kit">Starter Kit</a> helpful for bootstrapping your next AEM Apps project! Please feel free to reach out in the comments below if you have any issues making it work for you, or have any other questions on AEM Apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SUMMIT 2015: Mobile App Dev &amp; Content Management with AEM]]></title>
    <link href="https://brucelefebvre.com/blog/2015/02/05/summit-2015-mobile-app-dev-and-content-management-with-aem/"/>
    <updated>2015-02-05T17:45:00-05:00</updated>
    <id>https://brucelefebvre.com/blog/2015/02/05/summit-2015-mobile-app-dev-and-content-management-with-aem</id>
    <content type="html"><![CDATA[<p>I&#8217;m thrilled to be returning to beautiful Salt Lake City this March to host a technical session on <a href="https://adobesummit.lanyonevents.com/2015/slc/connect/sessionDetail.ww?SESSION_ID=2586">Mobile App Development and Content Management with AEM</a> at Adobe SUMMIT 2015.</p>

<p>Digging through my chicken scratch in an old notebook, I was able to locate what I suspect to be my notes from one of the first meetings about the potential of an integration between Adobe PhoneGap (then, version 1.9) and AEM - better known as CQ 5.5 at the time (circa July 2012):</p>

<p><img src="https://brucelefebvre.com/images/phonegap_cq_notes.jpeg" title="'First thoughts on Adobe PhoneGap and AEM'" ></p>

<!-- more -->


<p>Reflecting from nearly three years later reveals that while much has changed, many of our initial thoughts on the subject still hold true today. As the number of platforms in the mobile space keeps growing it&#8217;s never been more important to be able to &#8220;write apps that behave as native apps without having to learn a new language&#8221;. With all the improvements that have been made to the web since we began, there is still a &#8220;gap&#8221; in the device features available to sites we visit with our mobile browsers and the APIs available to apps installed on our home screens. Still, the proposition of building apps with web technology we know and love is as appealing as I thought it was in 2012.</p>

<p>The integration of AEM and Adobe PhoneGap has come a long way in this time. Building on the feedback I received from my session at last year&#8217;s SUMMIT, my talk - <a href="https://adobesummit.lanyonevents.com/2015/slc/connect/sessionDetail.ww?SESSION_ID=2586">Mobile app dev and content management with AEM</a> - will take a technical deep dive into PhoneGap Enterprise. We&#8217;ll be covering as much as I can possibly fit into an hour: from creating your very first PhoneGap Enterprise app, to managing that app with the new and improved AEM Apps dashboard, to testing (from unit to integration to acceptance), and closing with a look at publishing content updates to your app - ensuring your customers will keep coming back for more. We&#8217;ll accomplish all this without losing track of our goals: utilizing tools that your team already knows, simplifying your overall app management pain points, and putting your brand in pole position with a flexible platform to deliver the next generation of mobile experiences.</p>

<p>After all this time, I still find it exciting.</p>

<hr />

<p>Wondering how you can deliver the next generation of mobile experiences? Attend Summit and join me at <a href="https://adobesummit.lanyonevents.com/2015/slc/connect/sessionDetail.ww?SESSION_ID=2586">Mobile app development and content management with AEM</a>.</p>

<p>This isnâ€™t the only great content on Adobe PhoneGap / AEM Apps; If you want hands-on experience check out <a href="https://adobesummit.lanyonevents.com/2015/slc/connect/sessionDetail.ww?SESSION_ID=2587">Introduction to Adobe PhoneGap Enterprise for Marketers</a> and <a href="https://adobesummit.lanyonevents.com/2015/slc/connect/sessionDetail.ww?SESSION_ID=2588">Introduction to Adobe PhoneGap Enterprise for Developers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AEM Apps Feature Pack Updates]]></title>
    <link href="https://brucelefebvre.com/blog/2014/11/17/aem-apps-featurepack-updates/"/>
    <updated>2014-11-17T11:16:00-05:00</updated>
    <id>https://brucelefebvre.com/blog/2014/11/17/aem-apps-featurepack-updates</id>
    <content type="html"><![CDATA[<p>A keen observer of AEM&#8217;s Package Share may have noticed two new offerings show up in the past couple of weeks. In particular, our team is thrilled to announce the availability of the <a href="https://www.adobeaemcloud.com/content/marketplace/marketplaceProxy.html?packagePath=/content/companies/public/adobe/packages/cq600/featurepack/cq-6.0.0-featurepack-4558">AEM Apps feature pack 1</a>, and an updated <a href="https://www.adobeaemcloud.com/content/marketplace/marketplaceProxy.html?packagePath=/content/companies/public/adobe/packages/cq60/product/cq-geometrixx-outdoors-app-pkg">Geometrixx Outdoors App sample</a> which demonstrates the usage of these new features. Let&#8217;s take a quick tour.</p>

<h3>Application Command Center</h3>

<p>The feature pack includes a single user interface for managing all aspects of an appâ€™s lifecycle. The Command Center enables you to keep app content fresh and relevant, while understanding how the app is performing in one intuitive view.</p>

<p><img src="https://brucelefebvre.com/images/sample-updates/apps-command-center.png" title="'AEM Apps Command Center'" ></p>

<!-- more -->


<p>Towards the top left of this screenshot is the Details pane which enables configuration of app metadata including name and description, screenshots for app store submission, and update server URL amongst others. Heading clockwise is the Metrics pane which provides a high-level overview of key analytics data and gives access to Adobe Mobile Services for those wishing to delve further into the details. Last but not least is the PhoneGap Build tile which seamlessly integrates with Adobe&#8217;s cloud build service, enabling users to compile apps across three platforms without installing an SDK or configuring a single environment variable (you&#8217;re welcome, Windows users).</p>

<h3>App Update Management</h3>

<p>Application content can be updated instantly without requiring a trip back to the platform&#8217;s app store. Updates are managed through a straightforward workflow and tools are provided to verify content changes in development, staging, and production environments.</p>

<p><img src="https://brucelefebvre.com/images/sample-updates/content-sync-update.jpg" title="'Content Sync Update Management'" ></p>

<p>In this screenshot I&#8217;m naming my latest update - a straightforward change of business hours - to keep a log of each update that I push out to my customers.</p>

<h3>App Content Authoring</h3>

<p>Content authors (non-technical users) can easily create and update app content using a touch based, WYSIWYG, drag-and-drop interface. The feature pack includes new mobile-optimized components for easy content creation.</p>

<p><img src="https://brucelefebvre.com/images/sample-updates/apps-authoring.png" title="'Touch friendly authoring in action'" ></p>

<p>Pictured here is an app I created for my talk at <a href="http://pgday.phonegap.com/us2014/">PhoneGap Day</a> which I updated over-the-air on stage to demonstrate some of the capabilities of AEM Apps. The source for my demo can be <a href="https://github.com/blefebvre/aem-pgday-talk-app">found here</a>.</p>

<h3>Digital Publishing Suite Adobe Content Viewer Access</h3>

<p>The latest release of the Adobe Content Viewer can connect directly to an AEM authoring environment. Now AEM generated DPS content can be tested and validated without having to upload to the DPS Folio Publisher Service, enabling you to iterate more quickly on your content.</p>

<p><img src="https://brucelefebvre.com/images/sample-updates/dps-acv.png" width="320" title="'Adobe Content Viewer'" ></p>

<h3>But wait, there&#8217;s more!</h3>

<p>To complement the feature pack release, we&#8217;ve updated our <a href="https://github.com/Adobe-Marketing-Cloud/aem-phonegap-starter-kit">AEM Apps Starter Kit</a> to take advantage of the state of the art in enterprise application development with AEM. Take a look at the README to see just how easy it is to bootstrap your own AEM Apps project today.</p>

<p>I&#8217;ve also brought my <a href="https://github.com/blefebvre/aem-phonegap-kitchen-sink">AEM Apps Kitchen Sink</a> project up to spec. If you haven&#8217;t tried it yet, the Kitchen Sink is an AEM App which demonstrates the usage of various Cordova/PhoneGap API&#8217;s, implemented as authorable components in an application that can be updated over-the-air.</p>

<p><img src="https://brucelefebvre.com/images/sample-updates/kitchen-sink-update.png" width="320" title="'Kitchen Sink OTA update'" ></p>

<p>On the technical side, the Kitchen Sink&#8217;s AEM page component has been completely re-written using <a href="http://docs.adobe.com/docs/en/aem/6-0/develop/sightly.html">Sightly</a>, and we don&#8217;t think you&#8217;ll miss JSP <em>at all</em>. Performance junkies will be pleased to learn that every page transition in the Kitchen Sink is handled by the awesome <a href="http://plugins.telerik.com/plugin/native-page-transitions">NativePageTransitions</a> plugin.</p>

<p>As always, feedback or questions on the above are welcome. Please feel free to reach out to me on <a href="https://twitter.com/brucelefebvre">twitter</a> or via the comments on this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[adaptTo() 2014: Mobile app dev with Cordova, Sling, and AEM]]></title>
    <link href="https://brucelefebvre.com/blog/2014/09/23/adaptto-2014-mobile-app-dev-with-cordova/"/>
    <updated>2014-09-23T14:17:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2014/09/23/adaptto-2014-mobile-app-dev-with-cordova</id>
    <content type="html"><![CDATA[<p>I was thrilled to have the opportunity to present at this year&#8217;s <a href="http://adapt.to/2014/en/schedule/mobile-app-development-with-apache-cordova-and-aem.html">adaptTo() meetup</a> in Berlin. My slides have been included below, as well as all the sample code that I demonstrated during my session.</p>

<p><img src="https://brucelefebvre.com/images/app_screenshot.png" title="'Sling blog app screenshot'" ></p>

<!-- more -->


<h3>Slides</h3>

<iframe src="https://brucelefebvre.com//www.slideshare.net/slideshow/embed_code/39421014" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>


<p>Also available <a href="http://www.slideshare.net/rbl002/adapt-to2014-mobileapps">on slideshare</a>.</p>

<h3>Code</h3>

<p>Sling blog sample: <a href="https://github.com/blefebvre/cordova-sling-blog-sample">https://github.com/blefebvre/cordova-sling-blog-sample</a></p>

<p>AEM PhoneGap Kitchen Sink: <a href="https://github.com/blefebvre/aem-phonegap-kitchen-sink">https://github.com/blefebvre/aem-phonegap-kitchen-sink</a></p>

<p>Thanks to those in the audience for your attention. Hope to be back again next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[adaptTo() 2014: Mobile Apps]]></title>
    <link href="https://brucelefebvre.com/blog/2014/08/24/adaptto-2014-mobile-apps/"/>
    <updated>2014-08-24T21:17:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2014/08/24/adaptto-2014-mobile-apps</id>
    <content type="html"><![CDATA[<p>In just under a month, I will be speaking at my first adaptTo() on the subject of <a href="http://adapt.to/2014/en/schedule/mobile-app-development-with-apache-cordova-and-aem.html">Building Mobile Applications with Apache Cordova and AEM</a>.</p>

<p><img src="https://brucelefebvre.com/images/ipad-table.jpg" title="'Writing on the road'" ></p>

<!-- more -->


<p>As I compose this post at a kitchen table 850 km from home I can&#8217;t help but think about how much these shiny pocket computers have changed the way we work, play, and live. According to Apple&#8217;s numbers there have been over 75 billion individual app downloads since the introduction of the platform. At roughly this point last year Android was poised to overtake that number, reporting a staggering 2.5 billion downloads per month. As web technologists, how can we leverage our skill set to get in on the action?</p>

<p>In my talk at adaptTo() I&#8217;ll delve into Apache Cordova, a project built to enable cross-platform app development with standards-based web technology. I&#8217;ll explore how it can be used to interface directly with Apache Sling, and close with a demo of how the AEM + Cordova integration (affectionately known as PhoneGap Enterprise) can be used to empower your marketing personnel to keep your application&#8217;s content relevant with tools they already love. Code samples will be included to get you started today - with or without an AEM license.</p>

<p>If you have any questions that you&#8217;d like to see addressed during the talk, please feel free to reach out in the comments section below. Hope to see you there.</p>

<p><a href="http://adapt.to/2014/en/schedule/mobile-app-development-with-apache-cordova-and-aem.html">Mobile app development with Apache Cordova and AEM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IoT Day in Ottawa]]></title>
    <link href="https://brucelefebvre.com/blog/2014/06/06/iot-day-in-ottawa/"/>
    <updated>2014-06-06T11:40:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2014/06/06/iot-day-in-ottawa</id>
    <content type="html"><![CDATA[<p>The folks at <a href="http://www.meetup.com/iotottawa/events/184276702/">IoT Ottawa</a> hosted an all-day meetup on the subject of the Internet of Things, right here in the Adobe Ottawa office tower. As someone new to the IoT field I found the many short, to-the-point sessions served as both a nice introduction to possibilities in the industry and also as a glimpse into the innovation happening right here in our backyard. What follows are my personal highlights from the day.</p>

<p><img src="https://brucelefebvre.com/images/iot-ottawa.jpg" title="Dr. Ghods on Smart Buildings" alt="Dr. Ghods on Smart Buildings"></p>

<p>(thanks to <a href="https://twitter.com/_Aali">Aali R. Alizadeh</a> for sharing this picture)</p>

<!-- more -->


<h3>Next-Generation Wearable Tech: Fitness Intelligence</h3>

<p>As a cyclist and runner currently tracking my training using a number of devices (Garmin Edge, Forerunner, Strava iPhone app, Wahoo Kickr) and services (Strava, TrainerRoad, Fitbit), this talk really struck a chord with me.</p>

<p>In the most basic case, fitness wearables are simply accelerometers that interpret movement to calculate metrics including how many steps you&#8217;ve taken and floors you&#8217;ve climbed. When combined with some details of your physiology, they can estimate a number of additional metrics including number of calories burned and total distance traveled. The next generation of wearables will be smarter, both in terms of the sensors they use and the way they analyze and interpret the signals captured.</p>

<p>Advanced wearables will be able to sense and measure much more than basic motion. Hydration monitors, lactic acid monitors, and advanced motion interpretation are all features that we can expect to see in the next generation of fitness wearables. Sensors like these will be able to tell you if you&#8217;re in the right zone for the length of training ride you&#8217;re on, or if you&#8217;re going to burn out too early. They&#8217;ll be able to compare the motion and signals from your muscles to the profile of a professional athlete to provide tips on being more efficient. Using population statistics, they&#8217;ll warn you if a motion you&#8217;re performing has been known to lead to injury.</p>

<p>Leonard MacEachern spoke on behalf of his company GestureLogic who will soon be starting a crowd funding campaign for their product, <a href="http://leohelps.com/">LEO</a>, which aims to fill this market niche.</p>

<h3>Why Open Source will Drive IoT Innovation</h3>

<p>When I&#8217;m not riding my bike or running I can usually be found in front of a monitor working primarily with web technology. As a web developer, I have benefited in a big way from the open nature of the www, and strongly believe that much of the success of the platform has been a result of this openness.</p>

<p>Speaking as the Executive Director of the <a href="http://www.eclipse.org/org/foundation/">Eclipse Foundation</a>, Mike Milinkovich&#8217;s message was that in order for the IoT industry to be truly disruptive, it must follow the open pattern of the web. He reminded us that no matter how much money is thrown at a technology it&#8217;s still the developers who will <a href="http://thenewkingmakers.com/">choose with their feet</a> where they spend their time and energy. Like Linux, Apache, the www, and the w3c have demonstrated, &#8216;less friction&#8217; is still the best model for getting your technology in the hands of developers.</p>

<p>There are many protocols emerging to support the IoT including <a href="http://www.eclipse.org/paho/">paho</a>, <a href="http://iot.eclipse.org/protocols.html#oma-lwm2m">OMA Lightweight M2M</a>, <a href="https://projects.eclipse.org/proposals/moquette-mqtt">Moquette MQTT</a>, and <a href="http://www.onem2m.org/">oneM2M</a>. Open frameworks are under development as well, including: <a href="http://www.eclipse.org/proposals/technology.kura/">Kura</a>, a Java &amp; OSGi based framework, and <a href="https://projects.eclipse.org/projects/technology.ponte">Ponte</a>, billed as a bridge from M2M to REST.</p>

<p>Open hardware like the Arduino, Pi, and company will be equally as important as the software stack for ensuring the industry remains accessible to hobbyists and tinkerers alike. After his session Mike could be found giving demos of some IoT projects he&#8217;s currently working on. I&#8217;m sold; my first Raspberry Pi kit will be arriving next week.</p>

<h3>Smart Buildings - The Future of Construction Industry</h3>

<p>Dr. Pouria Ghods, speaking on behalf of <a href="http://www.giatecscientific.com/">Giatec Scientific</a>, defined &#8216;infrastructure&#8217; as the physical structures needed to support our society. As people responsible for  infrastructure, we need to be able to sense changes, react to them, and optimize the way we perform maintenance - all while keeping things safe for public use. Traditionally this sensing has been done in two important stages: during construction, and on a schedule for the rest of the structure&#8217;s lifespan.</p>

<p>There was much that I did not know about concrete. For example, each truckload of concrete is tested three times during the pour to ensure consistency. As I understand it, this test involves putting a small cylinder of the dried concrete under a large amount of load to ensure that it meets requirements of the structure. If it were to fail, the poured section of that structure would need to be redone. Dr. Ghods proposes that we can do better than this: by monitoring the concrete both inside the truck and again once it has been poured into its forms, we can increase our confidence in real-time that the mix is correct and consistent.</p>

<p>The state of the art for monitoring existing infrastructure still involves sending engineers on-site to probe and drag chains across concrete in search of faults and deterioration. Imagine instead a building that, after an earthquake, is able to report that it sensed an unusual amount of vibration on the 6th floor. Think of the time and money (and potentially, lives) that could be saved if a bridge could tell it&#8217;s engineers exactly where cracking or corrosion was starting to occur, before it became a threat to public safety.</p>

<hr />

<p>Exciting times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Apps: Made and managed in AEM]]></title>
    <link href="https://brucelefebvre.com/blog/2014/05/30/mobile-apps-made-and-managed-in-aem/"/>
    <updated>2014-05-30T00:07:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2014/05/30/mobile-apps-made-and-managed-in-aem</id>
    <content type="html"><![CDATA[<p>I&#8217;m thrilled to be returning to Basel this summer to present at the conference formerly known as CQCON: <a href="http://www.connectcon.ch/2014/en.html">CONNECT Web Experience</a>. This year I&#8217;ll be speaking about building and managing mobile applications within AEM, with a focus on the technical details of the solution.</p>

<p>To frame the context of the integration between AEM and PhoneGap, I told a story of a hypothetical company looking to extend the reach of their content by <a href="https://brucelefebvre.com/blog/2014/03/14/so-you-want-to-build-an-app/">building a mobile app</a>. Since presenting at both <a href="http://tv.adobe.com/watch/adobe-summit-2014/technical-session-mobile-app-development-and-content-management-with-aem/">Adobe SUMMIT</a> and <a href="https://brucelefebvre.com/blog/2014/04/10/aemhub-mobile-apps-in-aem/">AEMHub</a>, I&#8217;ve had a chance to work with some real, non-hypothetical customers, and have selected a few themes from these experiences to highlight for an audience of highly-technical AEM pros.</p>

<!-- more -->


<p>Build it yourself, or leverage an existing library? Lean on jQuery/Zepto/xui, or forge on alone? AngularJS, Ember or Backbone? Bacon, ham or sausage? Today&#8217;s web developer has options aplenty when it comes to building product - too many even, you might argue. As developers of mobile apps we must choose carefully to ensure we&#8217;re simplifying our code base while not restricting our options as the platform evolves. We need to be conscious that all the processing power and memory available to our app will fit into our user&#8217;s pocket (&#8216;Note&#8217; users excluded). We must recognize that expectations of a mobile app are very different from that of the web, especially with regard to offline availability of content. As such, the decision of which 3rd party libraries to depend and build upon must be deeper than simply picking the flavour of the week. I&#8217;ll dig into the libraries we&#8217;ve had success working with and describe the long (and somewhat bumpy) road that led us to them.</p>

<p>Whether dealing with products in a commerce scenario or physical properties in hospitality, app content often involves a set of items that should be rendered in a similar fashion. This type of data lends itself nicely to a template based approach, one that is well supported by AngularJS. I&#8217;ll present one approach to structuring your data for consumption by AngularJS that results in a scalable - and maintainable - AEM app.</p>

<p>PhoneGap&#8217;s Javascript to native bridge is a key piece of the framework, one that serves to distinguish your app from a traditional mobile website by exposing access to platform APIs through it&#8217;s pluggable architecture. Some of the functionality supported by featured Cordova plugins include capturing images via the device camera(s), access to the contact database, file system access, and <a href="http://plugins.cordova.io/#/">many more</a>. I&#8217;ll present the patterns we followed to expose this bridge to our app&#8217;s components, and share code samples that&#8217;ll have you up and running with your own project in no time.</p>

<p>See you there.</p>

<p><a href="http://www.connectcon.ch/2014/en.html">CONNECT Web Experience</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AEMHub 2014: Mobile Apps in AEM]]></title>
    <link href="https://brucelefebvre.com/blog/2014/04/10/aemhub-mobile-apps-in-aem/"/>
    <updated>2014-04-10T11:32:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2014/04/10/aemhub-mobile-apps-in-aem</id>
    <content type="html"><![CDATA[<p>My slides from AEMHub are available here: <a href="https://brucelefebvre.com/assets/mobile-apps-m-and-m-in-aem/">Mobile apps: Made and managed in AEM</a></p>

<p>The code from my demo is available on github: <a href="http://bit.ly/aem-pg">github.com/blefebvre/aem-phonegap-kitchen-sink</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So, you want to build an app]]></title>
    <link href="https://brucelefebvre.com/blog/2014/03/14/so-you-want-to-build-an-app/"/>
    <updated>2014-03-14T14:03:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2014/03/14/so-you-want-to-build-an-app</id>
    <content type="html"><![CDATA[<p>You&#8217;ve been approached by management and given orders to begin architecting a plan to get that ever-coveted place in the app store. Your peers at the office are devoted iOS fans - aside from that one guy, still touting the battery life of his flip phone - and expect to see your work in their preferred store, and soon. However, upon reviewing mobile browser analytics from your company&#8217;s site, you notice a trend: not all traffic is from mobile Safari. Hits seem to be originating from Android browsers at about half the rate of Safari, and Google&#8217;s Chrome browser is not far behind. Your office may be satisfied with an iPhone app, but how will your Android customers take it?</p>

<!-- more -->


<p>Being a primarily web-oriented shop your developers are well versed in the finer points of building a progressively enhanced, responsive site that renders fast and legibly on devices of varying form factors, taking advantage of features present on the latest models while not leaving anyone behind (right?). They don&#8217;t have Objective-C experience, and their server side Java skills will only get them so far in Android or BlackBerry native development. There&#8217;s always the option of outsourcing, but it comes with a price tag - one that does not soon disappear if you plan on keeping your app healthy and relevant on the latest hardware.</p>

<p>Enter PhoneGap. A <a href="http://phonegap.com/2012/03/19/phonegap-cordova-and-what%E2%80%99s-in-a-name/">distribution of Apache Cordova</a>, PhoneGap is a project which describes itself as enabling cross-platform app development with web technologies you know and love. It sounds promising! You read on. Turns out PhoneGap is basically a web browser, augmented with a JavaScript bridge that provides direct access to device features including the file system, camera, accelerometer, geolocation, compass, contacts, <a href="http://docs.phonegap.com/en/3.4.0/cordova_plugins_pluginapis.md.html#Plugin%20APIs">and more</a>. The plugin architecture is extensible, meaning any device feature that is not currently available can be implemented and added to your app, and even shared with the world if you feel so inclined. It has been around for about 5 years and <a href="http://phonegap.com/app/feature/">many successful apps</a> have been produced with it.</p>

<p>As it stands, PhoneGap supports all the device operating systems &amp; versions that your team plans to target. Now, if only there was a way to repurpose your brand&#8217;s most valuable asset: its content. Using Adobe&#8217;s <a href="http://www.adobe.com/ca/solutions/web-experience-management.html">Experience Manager</a> (formerly CQ), your team has worked tirelessly to ensure the workflows and business logic are in place to support a distributed team of content authors, marketing personnel, and IT users alike. Your authors have built a solid foundation in the solution, and have embraced the agility afforded by being able to contribute on their various devices via the touch-friendly user interface. If only there was a way&#8230;</p>

<p>Well, there is. This spring I&#8217;m thrilled to be sharing the details of the AEM 6.0 and PhoneGap integration at both <a href="https://adobesummit.activeevents.com/2014/slc/connect/sessionDetail.ww?SESSION_ID=1211">Adobe SUMMIT</a> in Salt Lake City, and <a href="http://aemhub.cognifide.com/speakers.html#Bruce-Lefebvre">AEM Hub</a> - a brand new conference taking place in London. I hope you will join me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CQ Gems: Mobile First Development]]></title>
    <link href="https://brucelefebvre.com/blog/2013/09/18/cq-gems-mobile-first-development/"/>
    <updated>2013-09-18T15:11:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2013/09/18/cq-gems-mobile-first-development</id>
    <content type="html"><![CDATA[<p>I presented a talk on <a href="http://dev.day.com/content/ddc/en/gems/mobile-first-development-with-cq-made-easy0.html">Mobile First Development with CQ Made Easy</a> as part of the <a href="http://dev.day.com/gems">CQ Gems</a> technical series. My slides from CQCON were updated to include a more complete list of resources.</p>

<p>Bonus: the source code of &#8220;CQCON Village&#8221; - the site I made responsive during the demo - is available on github including all the steps I went through to transform it.</p>

<!-- more -->


<p>Slides: <a href="https://brucelefebvre.com/assets/cqcon-mobile-first/">CQCON mobile first</a> (resources start at <a href="https://brucelefebvre.com/assets/cqcon-mobile-first/#/42">slide 42</a>)</p>

<p>Demo source code: <a href="https://github.com/blefebvre/cqcon-rwd-demo">CQCON Village RWD Overhaul</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evolve 2013: CQ Mobile Apps]]></title>
    <link href="https://brucelefebvre.com/blog/2013/08/28/evolve-2013-cq-mobile-apps/"/>
    <updated>2013-08-28T16:28:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2013/08/28/evolve-2013-cq-mobile-apps</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/savs">Andrew Savory</a> and I talked about building mobile applications with CQ at <a href="http://www.evolve13.com/">Evolve13</a>. Our slides are available here: <a href="https://brucelefebvre.com/assets/evolve13-cq-mobile-apps/">evolve13-cq-mobile-apps</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Dispatcher on OS X]]></title>
    <link href="https://brucelefebvre.com/blog/2013/08/22/setting-up-a-dispatcher-on-os-x/"/>
    <updated>2013-08-22T22:40:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2013/08/22/setting-up-a-dispatcher-on-os-x</id>
    <content type="html"><![CDATA[<p>The dispatcher is an important piece of a secure, stable, and solidly-performing AEM implementation. According to <a href="http://dev.day.com/docs/en/cq/current/deploying/dispatcher.html">the documentation</a> it can provide caching, load balancing, as well as help to protect your publish instances from attack. For such a multifaceted tool it seems to receive very little attention during the dev process, typically called to action in the final stages of a deployment when most of the dev work has already been done. I propose that developers (including myself) could write better code if they had a deeper understanding of this tool, which is why I went through the process of setting one up on my Mac. What follows are my notes.</p>

<p>Here&#8217;s what you&#8217;ll need to get started:</p>

<!-- more -->


<ul>
<li>OS X machine with Apache installed and enabled</li>
<li>AEM 5.6.1 quickstart

<ul>
<li>author on :4502</li>
<li>publish on :4503</li>
</ul>
</li>
</ul>


<p>Figure out which version of Apache httpd you&#8217;re working with:</p>

<pre><code>$ httpd -v
</code></pre>

<p>Download and extract the correct dispatcher version for your httpd:</p>

<p><a href="https://www.adobeaemcloud.com/content/companies/public/adobe/dispatcher/dispatcher.html">https://www.adobeaemcloud.com/content/companies/public/adobe/dispatcher/dispatcher.html</a></p>

<p>Inside the extracted directory you will find a file named &#8216;dispatcher-apache&lt;version&gt;.so&#8217;. Copy this file to /usr/libexec/apache2. In my case:</p>

<pre><code>$ sudo cp dispatcher-apache2.2-4.1.4.so /usr/libexec/apache2
</code></pre>

<p>Head to the apache2 modules directory:</p>

<pre><code>$ cd /usr/libexec/apache2/
</code></pre>

<p> Create a symlink to the dispatcher module you just copied over:</p>

<pre><code>$ sudo ln -s dispatcher-apache2.2-4.1.4.so mod_dispatcher.so
</code></pre>

<p>Head to /etc/apache2 to configure it:</p>

<pre><code>$ cd /etc/apache2
</code></pre>

<p>Open httpd.conf (as root) with your editor of choice and add the following line to the end of the LoadModule section (line 119 in my case):</p>

<pre><code>LoadModule dispatcher_module libexec/apache2/mod_dispatcher.so
</code></pre>

<p>After this line, add the following configuration:</p>

<pre><code># configure the minimal setting for the dispatcher
# the main configuration is read from the 'DispatcherConfig' file.
&lt;IfModule disp_apache2.c&gt;
    # location of the configuration file. eg: 'conf/dispatcher.any'
    DispatcherConfig /etc/apache2/conf/dispatcher.any

    # location of the dispatcher log file. eg: 'logs/dispatcher.log'
    DispatcherLog    /var/log/apache2/dispatcher.log

    # log level for the dispatcher log
    # 0 Errors
    # 1 Warnings
    # 2 Infos
    # 3 Debug
    DispatcherLogLevel 3

    # if turned to 1, the dispatcher looks like a normal module
    # since build 5210, this setting has no effect, since it used to crash
    # apache if set to 0.
    DispatcherNoServerHeader 1

    # if turned to 1, request to / are not handled by the dispatcher
    # use the mod_alias then for the correct mapping
    DispatcherDeclineRoot 0
&lt;/IfModule&gt;

&lt;Directory /&gt;
    &lt;IfModule disp_apache2.c&gt;
        # enable dispatcher for ALL request. if this is too restrictive,
        # move it to another location
        SetHandler dispatcher-handler
        ModMimeUsePathInfo On
    &lt;/IfModule&gt;

    Options FollowSymLinks
    AllowOverride None
&lt;/Directory&gt;
</code></pre>

<p>Create a directory named &#8216;conf&#8217; in /etc/apache2</p>

<pre><code>$ sudo mkdir /etc/apache2/conf
</code></pre>

<p>From the extracted dispatcher directory, copy the provided dispatcher.any to conf:</p>

<pre><code>$ cd ~/Downloads/dispatcher-apache2.2-darwin-x86-64-4.1.4/conf/
$ sudo cp dispatcher.any /etc/apache2/conf/
</code></pre>

<p>Open the copy of dispatcher.any with your editor of choice. Look for the &#8216;/renders&#8217; entry, and point the &#8216;/rend01&#8217; instance host name and port to your publish instance:</p>

<pre><code>/hostname "127.0.0.1"
/port "4503"
</code></pre>

<p>Allow requests with authorized header (uncomment and change value) in dispatcher.any:</p>

<pre><code>/allowAuthorized "1"
</code></pre>

<p>Set the document root directory (search for the existing value):</p>

<pre><code>/docroot "/Library/WebServer/Documents"
</code></pre>

<p>Check your config syntax:</p>

<pre><code>$ sudo apachectl configtest
</code></pre>

<p>The previous command should have outputted &#8216;Syntax OK&#8217;.</p>

<p>Did it not? You may need to correct your configuration. &#8216;apachectl configtest&#8217; should be able to tell you on which line your config is broken.</p>

<p>Give your httpd document root directory to the _www user and group:</p>

<pre><code>$ sudo chown _www:_www /Library/WebServer/Documents/
</code></pre>

<p>Stop Apache httpd:</p>

<pre><code>$ sudo apachectl stop
</code></pre>

<p>In another terminal window (or tab), tail the following log files for errors:</p>

<pre><code>$ tail -f /var/log/apache2/error_log /var/log/apache2/dispatcher.log
</code></pre>

<p>Start Apache httpd back up:</p>

<pre><code>$ sudo apachectl start
</code></pre>

<p>Barring any errors in the logs you should now be able to browse your AEM publish content via the dispatcher:</p>

<p><a href="http://localhost/content/geometrixx-media/en.html">http://localhost/content/geometrixx-media/en.html</a></p>

<p>You can also poke around /Library/WebServer/Documents/ to see how the static content is stored on the file system.</p>

<p>That&#8217;s it! You&#8217;ve just configured your very own dispatcher. I&#8217;ve only scratched the surface here and really glazed over much of the configuration, so make sure to read the following resources before releasing this dispatcher into the wild:</p>

<p>Dispatcher - <a href="http://dev.day.com/docs/en/cq/current/deploying/dispatcher.html">http://dev.day.com/docs/en/cq/current/deploying/dispatcher.html</a></p>

<p>Configuring Dispatcher - <a href="http://dev.day.com/docs/en/cq/current/deploying/dispatcher/disp_config.html">http://dev.day.com/docs/en/cq/current/deploying/dispatcher/disp_config.html</a></p>

<p>Security Checklist - <a href="http://dev.day.com/docs/en/cq/current/deploying/security_checklist.html">http://dev.day.com/docs/en/cq/current/deploying/security_checklist.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CQCON 2013: Mobile First]]></title>
    <link href="https://brucelefebvre.com/blog/2013/06/20/cqcon-2013-mobile-first/"/>
    <updated>2013-06-20T08:10:00-04:00</updated>
    <id>https://brucelefebvre.com/blog/2013/06/20/cqcon-2013-mobile-first</id>
    <content type="html"><![CDATA[<p>My slides from <a href="http://www.cqcon.eu/2013/en.html">CQCON 2013</a> are available here: <a href="https://brucelefebvre.com/assets/cqcon-mobile-first/">cqcon-mobile-first</a></p>
]]></content>
  </entry>
  
</feed>
